// newAHK 

// title                 ziel              system Kombination      action                                    timeout
// ahks[0]            github öffnen           win + 3           single                                    true,
//                                                       repeating = nextStep === currentStep      hasTimeout = currentStep:has delay
//                                                       repeating ? loop : single                 hasTimeout : return delayTime : false,
//                                                                                                 needsADelay,mightNeedADelay, (if error in this step might need a delay) 
//                                                                                                 sobald this.Ahk  einen fehler ausspuckt, 


// öffneGithubInMeinerWin + NumberOrder   

// ahks = [
//       "öffneGithubInMeiner_Win_Number_order",
// ]

// console.log(`
  
//                 ahk Generator

// `);

// ;öffneGithubInMeiner => Win + NumberOrder
// ; mögliche hasX [loop, timeout]
// ; currentStepCounter = 0;
// ; let ahkProperties = { isLoop: false, isTimeout: false, hasLoop: false, hasTimeout: false  }
// ; let hasLoop = false;
// ; let hasTimeout = false;
// ;ziel : gitHub öffnen 
// ;systemDefault = win 3
// ;wunschEingabe = windowstaste 3
// ;has loop = currentStep:hasX(loop)
// ;has timeout = currentStep:hasX(timeout) :hasFunktionen bewirken dass im Test dieser Bereich geprüft werden muss / übergeben werden muss
//                                        ;Im gesamten Testdurchlauf, wird alles simuliert, mit den :hasX Werten 
//                                        ; :hasX Werte bedürfen immer einer prüfung
                                       
// ; return ahkProperties

const startAhkTest = (ahkProperties) => {
      const { isLoop, isTimeout, hasLoop, hasTimeout } = ahkProperties;
      if(isLoop) {

      }
}

export class Ahk {
      constructor(title, systemVorgabeEingabe, userWunschEingabe, cases, properties = null ) {
            this.cases = cases
            if(!this.cases) {
                  console.log("Keine Weiteren Anwendungsbeispiele eingetragen / oder bekannt");
            }
            this.title = title; // für dateipfad
            this.id = title;
            this.systemEingabe = systemVorgabeEingabe;
            this.wunschEingabe = userWunschEingabe
            // let obj = this;
            if(!properties) {
                  console.log("properties nicht vergeben worden also loop kann weitergeführt werden");
            }
            const { this.title, this.id, this.systemEingabe, this.wunschEingabe, this.properties } = obj;
            for(const [key, val] of Object.entries(this.properties)) {
                  const { isLoop, isTimeout, hasLoop, hasTimeout } = key;
                  console.log(isLoop);
                  // if(key )
            }
            // führe Eingabe aus
      }
}

let loopsArray = []

const switchScreenByWinNumber = new Ahk("switchScreenByWinKey + Number", [cases], { hasLoop: true, hasTimeout: true,});
// const test= new Ahk("test", "systemVorgabe z.b. ""win + 1" , "deine Wunscheingabe z.B. ""win + 3",["brauchst du diesen Key häufiger ? wenn nein, drücke Entfernen, wenn ja, liste sie hier auf und drücke anschließend tab"], { hasLoop: false, hasTimeout: false,});
const test= new Ahk("test", /* systemVorgabe z.B.*/ "win+" , /* deineWunscheingabe z.B.*/ "win+1", ["brauchst du diesen hotKey häufiger ? wenn nein, drücke Entfernen, wenn ja, lies dir diesen Satz zuende durch und führe die anweisung aus  => drücke entfernen, drücke tab => liste sie anschließend in einem array auf ["case [0]"], {isLoop: false, isTimeout: false, hasLoop: false, hasTimeout: false,});
